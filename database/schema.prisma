generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts Account[]
  sessions Session[]
  audits   audit[]
  ratings  user_rating[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model audit {
  id              Int            @id @default(autoincrement())
  changed_at      DateTime       @default(now())
  changed_by      String
  table_name      String         @db.VarChar(50)
  operation       operation_type
  row_id          Int
  modified_fields Json?
  note            String?
  user            User           @relation(fields: [changed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model character {
  id                  Int                  @id @default(autoincrement())
  url_slug            String               @unique @db.VarChar(100)
  name                String               @unique @db.VarChar(100)
  description         String?
  sketch_participants sketch_participant[]
}

model episode {
  id          Int       @id @default(autoincrement())
  url_slug    String    @unique @db.VarChar(100)
  lookup_slug String    @unique @db.VarChar(100)
  number      Int
  air_date    DateTime? @db.Date
  title       String?   @db.VarChar(100)
  description String?
  season_id   Int
  season      season    @relation(fields: [season_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sketches    sketch[]

  @@unique([season_id, number])
}

model person {
  id                  Int                  @id @default(autoincrement())
  url_slug            String               @unique @db.VarChar(100)
  name                String               @unique @db.VarChar(100)
  description         String?
  birth_date          DateTime?            @db.Date
  gender              gender_type
  sketch_participants sketch_participant[]
}

model user_rating {
  user_id      String
  sketch_id    Int
  rating_value Int?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  sketch       sketch   @relation(fields: [sketch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, sketch_id])
}

model recurring_sketch {
  id          Int      @id @default(autoincrement())
  url_slug    String   @unique @db.VarChar(100)
  name        String   @db.VarChar(100)
  description String?
  show_id     Int
  show        show     @relation(fields: [show_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sketches    sketch[]

  @@unique([show_id, name])
}

model season {
  id          Int       @id @default(autoincrement())
  url_slug    String    @unique @db.VarChar(100)
  lookup_slug String    @unique @default("") @db.VarChar(100)
  number      Int
  year        Int
  description String?
  show_id     Int
  episodes    episode[]
  show        show      @relation(fields: [show_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([show_id, number])
}

model show {
  id                 Int                @id @default(autoincrement())
  title              String             @unique @db.VarChar(100)
  url_slug           String             @unique @db.VarChar(100)
  description        String?
  recurring_sketches recurring_sketch[]
  seasons            season[]
}

model sketch_participant {
  id           Int              @id @default(autoincrement())
  sketch_id    Int
  character_id Int?
  person_id    Int?
  description  String?
  role         sketch_role_type
  character    character?       @relation(fields: [character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person       person?          @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sketch       sketch           @relation(fields: [sketch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sketch_tag {
  id        Int    @id @default(autoincrement())
  sketch_id Int
  tag_id    Int
  sketch    sketch @relation(fields: [sketch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag       tag    @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([sketch_id, tag_id])
}

model sketch {
  id                  Int                  @id @default(autoincrement())
  title               String               @db.VarChar(100)
  url_slug            String               @unique @db.VarChar(100)
  lookup_slug         String               @unique @db.VarChar(100)
  video_urls          String[]
  tagline             String?
  description         String?
  duration            Int?
  episode_id          Int
  recurring_sketch_id Int?
  user_ratings        user_rating[]
  sketch_participants sketch_participant[]
  sketch_tags         sketch_tag[]
  episode             episode              @relation(fields: [episode_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recurring_sketch    recurring_sketch?    @relation(fields: [recurring_sketch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tag_category {
  id       Int    @id @default(autoincrement())
  name     String @unique @db.VarChar(100)
  url_slug String @unique @db.VarChar(100)
  tags     tag[]
}

model tag {
  id              Int          @id @default(autoincrement())
  name            String       @db.VarChar(100)
  url_slug        String       @db.VarChar(100)
  lookup_slug     String       @unique @db.VarChar(100)
  tag_category_id Int
  sketch_tags     sketch_tag[]
  tag_category    tag_category @relation(fields: [tag_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([tag_category_id, url_slug])
  @@unique([tag_category_id, name])
}

enum gender_type {
  Male
  Female
  Other
}

enum operation_type {
  INSERT
  UPDATE
  DELETE
}

enum sketch_role_type {
  CastMember
  GuestActor
  Extra
  Writer
  Director
  Musician
  Other
}
