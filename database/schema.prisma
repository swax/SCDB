generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?      @map("email_verified")
  image          String?
  username       String         @unique @default(nanoid(6))
  role           user_role_type @default(Editor)
  mod_note       String?
  modified_by_id String?
  modified_at    DateTime       @default(now())

  modified_by User? @relation("UsersModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  accounts Account[]
  sessions Session[]
  audits   audit[]
  ratings  sketch_rating[]

  characters_created          character[]        @relation("CharactersCreated")
  characters_modified         character[]        @relation("CharactersModified")
  episodes_created            episode[]          @relation("EpisodesCreated")
  episodes_modified           episode[]          @relation("EpisodesModified")
  images_created              image[]            @relation("ImagesCreated")
  people_created              person[]           @relation("PeopleCreated")
  people_modified             person[]           @relation("PeopleModified")
  person_images_created       person_image[]     @relation("PersonImagesCreated")
  person_images_modified      person_image[]     @relation("PersonImagesModified")
  recurring_sketches_created  recurring_sketch[] @relation("RecurringSketchesCreated")
  recurring_sketches_modified recurring_sketch[] @relation("RecurringSketchesModified")
  seasons_created             season[]           @relation("SeasonsCreated")
  seasons_modified            season[]           @relation("SeasonsModified")
  shows_created               show[]             @relation("ShowsCreated")
  shows_modified              show[]             @relation("ShowsModified")
  show_images_created         show_image[]       @relation("ShowImagesCreated")
  show_images_modified        show_image[]       @relation("ShowImagesModified")
  sketches_created            sketch[]           @relation("SketchesCreated")
  sketches_modified           sketch[]           @relation("SketchesModified")
  sketch_cast_created         sketch_cast[]      @relation("SketchCastCreated")
  sketch_cast_modified        sketch_cast[]      @relation("SketchCastModified")
  sketch_credits_created      sketch_credit[]    @relation("SketchCreditsCreated")
  sketch_credits_modified     sketch_credit[]    @relation("SketchCreditsModified")
  sketch_tags_created         sketch_tag[]       @relation("SketchTagsCreated")
  sketch_tags_modified        sketch_tag[]       @relation("SketchTagsModified")
  tag_categories_created      tag_category[]     @relation("TagCategoriesCreated")
  tag_categories_modified     tag_category[]     @relation("TagCategoriesModified")
  tags_created                tag[]              @relation("TagsCreated")
  tags_modified               tag[]              @relation("TagsModified")
  user_ratings_modified       sketch_rating[]    @relation("SketchRatingsModified")
  user_modified               User[]             @relation("UsersModified")

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model audit {
  id              Int            @id @default(autoincrement())
  changed_at      DateTime       @default(now())
  changed_by_id   String
  table_name      String         @db.VarChar(50)
  operation       operation_type
  row_id          String
  modified_fields Json?
  changed_by      User           @relation(fields: [changed_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([table_name, row_id]) // Latest changes on edit page
  @@index([table_name, operation])
  @@index([changed_by_id]) // Changelog on profile page
}

model character {
  id             Int                @id @default(autoincrement())
  url_slug       String             @unique @db.VarChar(100)
  name           String             @unique @db.VarChar(100)
  description    String?
  person_id      Int?               @unique
  review_status  review_status_type @default(NeedsReview)
  created_by_id  String
  created_at     DateTime           @default(now())
  modified_by_id String
  modified_at    DateTime           @default(now())

  person       person?       @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  created_by   User          @relation("CharactersCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by  User          @relation("CharactersModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sketch_casts sketch_cast[]

  @@index([review_status])
}

model episode {
  id             Int                @id @default(autoincrement())
  url_slug       String             @unique @db.VarChar(100)
  lookup_slug    String             @unique @db.VarChar(100)
  number         Int
  air_date       DateTime?          @db.Date
  title          String?            @db.VarChar(100)
  description    String?
  season_id      Int
  review_status  review_status_type @default(NeedsReview)
  created_by_id  String
  created_at     DateTime           @default(now())
  modified_by_id String
  modified_at    DateTime           @default(now())

  created_by  User     @relation("EpisodesCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by User     @relation("EpisodesModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  season      season   @relation(fields: [season_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sketches    sketch[]

  @@unique([season_id, number])
  @@index([review_status])
}

model person {
  id             Int                @id @default(autoincrement())
  url_slug       String             @unique @db.VarChar(100)
  name           String             @unique @db.VarChar(100)
  description    String?
  birth_date     DateTime?          @db.Date
  death_date     DateTime?          @db.Date
  gender         gender_type
  review_status  review_status_type @default(NeedsReview)
  created_by_id  String
  created_at     DateTime           @default(now())
  modified_by_id String
  modified_at    DateTime           @default(now())

  created_by     User            @relation("PeopleCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by    User            @relation("PeopleModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sketch_casts   sketch_cast[]
  sketch_credits sketch_credit[]
  person_images  person_image[]
  character      character?

  @@index([review_status])
}

model person_image {
  id             Int      @id @default(autoincrement())
  person_id      Int
  image_id       Int
  sequence       Int
  description    String?
  created_by_id  String
  created_at     DateTime @default(now())
  modified_by_id String
  modified_at    DateTime @default(now())

  created_by  User   @relation("PersonImagesCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by User   @relation("PersonImagesModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person      person @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  image       image  @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sketch_rating {
  user_id        String
  sketch_id      Int
  rating_value   Int?
  modified_by_id String
  modified_at    DateTime @default(now())

  modified_by User   @relation("SketchRatingsModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sketch      sketch @relation(fields: [sketch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, sketch_id])
}

model recurring_sketch {
  id             Int                @id @default(autoincrement())
  url_slug       String             @unique @db.VarChar(100)
  lookup_slug    String             @unique @db.VarChar(100)
  title          String             @db.VarChar(100)
  description    String?
  show_id        Int
  review_status  review_status_type @default(NeedsReview)
  created_by_id  String
  created_at     DateTime           @default(now())
  modified_by_id String
  modified_at    DateTime           @default(now())

  created_by  User     @relation("RecurringSketchesCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by User     @relation("RecurringSketchesModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  show        show     @relation(fields: [show_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sketches    sketch[]

  @@unique([show_id, title])
  @@index([review_status])
}

model season {
  id             Int                @id @default(autoincrement())
  url_slug       String             @unique @db.VarChar(100)
  lookup_slug    String             @unique @default("") @db.VarChar(100)
  number         Int
  year           Int
  description    String?
  show_id        Int
  review_status  review_status_type @default(NeedsReview)
  created_by_id  String
  created_at     DateTime           @default(now())
  modified_by_id String
  modified_at    DateTime           @default(now())

  created_by  User      @relation("SeasonsCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by User      @relation("SeasonsModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  episodes    episode[]
  show        show      @relation(fields: [show_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sketches    sketch[]

  @@unique([show_id, number])
  @@index([review_status])
}

model show {
  id             Int                @id @default(autoincrement())
  url_slug       String             @unique @db.VarChar(100)
  title          String             @unique @db.VarChar(100)
  description    String?
  review_status  review_status_type @default(NeedsReview)
  created_by_id  String
  created_at     DateTime           @default(now())
  modified_by_id String
  modified_at    DateTime           @default(now())

  created_by         User               @relation("ShowsCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by        User               @relation("ShowsModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recurring_sketches recurring_sketch[]
  seasons            season[]
  show_images        show_image[]
  sketches           sketch[]

  @@index([review_status])
}

model show_image {
  id             Int      @id @default(autoincrement())
  show_id        Int
  image_id       Int
  sequence       Int
  created_by_id  String
  created_at     DateTime @default(now())
  modified_by_id String
  modified_at    DateTime @default(now())

  created_by  User  @relation("ShowImagesCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by User  @relation("ShowImagesModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  show        show  @relation(fields: [show_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  image       image @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sketch_cast {
  id             Int            @id @default(autoincrement())
  sketch_id      Int
  character_name String? // Used for one-off characters, otherwise use character_id, a trigger syncs the name if the id is set
  character_id   Int?
  person_id      Int?
  image_id       Int?
  sequence       Int
  description    String?
  role           cast_role_type
  created_by_id  String
  created_at     DateTime       @default(now())
  modified_by_id String
  modified_at    DateTime       @default(now())

  created_by  User       @relation("SketchCastCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by User       @relation("SketchCastModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  image       image?     @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  character   character? @relation(fields: [character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person      person?    @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sketch      sketch     @relation(fields: [sketch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sketch_credit {
  id             Int              @id @default(autoincrement())
  sketch_id      Int
  person_id      Int
  sequence       Int
  description    String?
  role           credit_role_type
  created_by_id  String
  created_at     DateTime         @default(now())
  modified_by_id String
  modified_at    DateTime         @default(now())

  created_by  User   @relation("SketchCreditsCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by User   @relation("SketchCreditsModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person      person @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sketch      sketch @relation(fields: [sketch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sketch_tag {
  id             Int      @id @default(autoincrement())
  sketch_id      Int
  tag_id         Int
  sequence       Int
  created_by_id  String
  created_at     DateTime @default(now())
  modified_by_id String
  modified_at    DateTime @default(now())

  created_by  User   @relation("SketchTagsCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by User   @relation("SketchTagsModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sketch      sketch @relation(fields: [sketch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag         tag    @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([sketch_id, tag_id])
}

model sketch {
  id                  Int                @id @default(autoincrement())
  title               String             @db.VarChar(100)
  url_slug            String             @unique @db.VarChar(100)
  lookup_slug         String             @unique @db.VarChar(100)
  video_urls          String[]
  image_id            Int?
  description         String?
  site_rating         Float?
  show_id             Int
  season_id           Int?
  episode_id          Int?
  recurring_sketch_id Int?
  review_status       review_status_type @default(NeedsReview)
  created_by_id       String
  created_at          DateTime           @default(now())
  modified_by_id      String
  modified_at         DateTime           @default(now())

  created_by       User              @relation("SketchesCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by      User              @relation("SketchesModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  image            image?            @relation(fields: [image_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_ratings     sketch_rating[]
  sketch_casts     sketch_cast[]
  sketch_credits   sketch_credit[]
  sketch_tags      sketch_tag[]
  show             show              @relation(fields: [show_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  season           season?           @relation(fields: [season_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  episode          episode?          @relation(fields: [episode_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recurring_sketch recurring_sketch? @relation(fields: [recurring_sketch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([review_status])
}

model tag_category {
  id             Int                @id @default(autoincrement())
  name           String             @unique @db.VarChar(100)
  url_slug       String             @unique @db.VarChar(100)
  review_status  review_status_type @default(NeedsReview)
  created_by_id  String
  created_at     DateTime           @default(now())
  modified_by_id String
  modified_at    DateTime           @default(now())

  created_by  User  @relation("TagCategoriesCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by User  @relation("TagCategoriesModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags        tag[]

  @@index([review_status])
}

model tag {
  id              Int                @id @default(autoincrement())
  name            String             @db.VarChar(100)
  url_slug        String             @db.VarChar(100)
  lookup_slug     String             @unique @db.VarChar(100)
  tag_category_id Int
  review_status   review_status_type @default(NeedsReview)
  created_by_id   String
  created_at      DateTime           @default(now())
  modified_by_id  String
  modified_at     DateTime           @default(now())

  created_by   User         @relation("TagsCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modified_by  User         @relation("TagsModified", fields: [modified_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sketch_tags  sketch_tag[]
  tag_category tag_category @relation(fields: [tag_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([tag_category_id, url_slug])
  @@unique([tag_category_id, name])
  @@index([review_status])
}

model image {
  id            Int      @id @default(autoincrement())
  cdn_key       String   @unique
  created_by_id String
  created_at    DateTime @default(now())

  created_by    User           @relation("ImagesCreated", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person_images person_image[]
  show_images   show_image[]
  sketch_casts  sketch_cast[]
  sketch        sketch[]
}

enum gender_type {
  Male
  Female
  Other
}

enum operation_type {
  INSERT
  UPDATE
  DELETE
}

enum cast_role_type {
  CastMember
  Guest
  Host
  Uncredited
}

enum credit_role_type {
  Writer
  Director
  Musician
  Other
}

enum user_role_type {
  None
  Editor
  Moderator
  SuperMod
  Admin
}

enum review_status_type {
  NeedsReview
  Flagged
  Reviewed
}
