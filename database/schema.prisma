generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts                    Account[]
  sessions                    Session[]
  audit          audit[]
  ratings        ratings[]
  
  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model audit {
  audit_id        Int            @id @default(autoincrement())
  changed_at      DateTime       @default(now())
  changed_by      String
  table_name      String         @db.VarChar(50)
  operation       operation_type
  row_id          Int
  modified_fields Json?
  note            String?
  user            User           @relation(fields: [changed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model characters {
  character_id            Int                       @id @default(autoincrement())
  character_name          String                    @unique @db.VarChar(100)
  slug                    String                    @unique @db.VarChar(100)
  description             String?
  sketch_character_actors sketch_character_actors[]
}

model episodes {
  episode_id     Int        @id @default(autoincrement())
  episode_number Int
  title          String     @db.VarChar(100)
  slug           String     @unique @db.VarChar(100)
  description    String?
  air_date       DateTime?  @db.Date
  season_id      Int
  seasons        seasons    @relation(fields: [season_id], references: [season_id], onDelete: NoAction, onUpdate: NoAction)
  sketches       sketches[]

  @@unique([season_id, episode_number])
}

model persons {
  person_id               Int                       @id @default(autoincrement())
  person_name             String                    @unique @db.VarChar(100)
  slug                    String                    @unique @db.VarChar(100)
  description             String?
  date_of_birth           DateTime?                 @db.Date
  gender                  gender_type
  sketch_character_actors sketch_character_actors[]
  sketch_writers          sketch_writers[]
}

model ratings {
  user_id      String
  sketch_id    Int
  rating_value Int?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  sketches     sketches @relation(fields: [sketch_id], references: [sketch_id], onDelete: NoAction, onUpdate: NoAction)
  user         User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, sketch_id])
}

model recurring_sketches {
  recurring_sketch_id   Int        @id @default(autoincrement())
  recurring_sketch_name String     @db.VarChar(100)
  slug                  String     @unique @db.VarChar(100)
  description           String?
  show_id               Int
  shows                 shows      @relation(fields: [show_id], references: [show_id], onDelete: NoAction, onUpdate: NoAction)
  sketches              sketches[]

  @@unique([show_id, recurring_sketch_name])
}

model seasons {
  season_id     Int        @id @default(autoincrement())
  season_number Int
  season_year   Int
  slug          String     @unique @db.VarChar(100)
  description   String?
  show_id       Int
  episodes      episodes[]
  shows         shows      @relation(fields: [show_id], references: [show_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([show_id, season_number])
}

model shows {
  show_id            Int                  @id @default(autoincrement())
  show_name          String               @unique @db.VarChar(100)
  slug               String               @unique @db.VarChar(100)
  description        String?
  recurring_sketches recurring_sketches[]
  seasons            seasons[]
  sketches           sketches[]
}

model sketch_character_actors {
  sketch_id    Int
  character_id Int
  person_id    Int?
  description  String?
  created_by   Int
  created_at   DateTime
  updated_by   Int
  updated_at   DateTime
  characters   characters @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction)
  persons      persons?   @relation(fields: [person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction)
  sketches     sketches   @relation(fields: [sketch_id], references: [sketch_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([sketch_id, character_id])
}

model sketch_tags {
  sketch_id Int
  tag_id    Int
  sketches  sketches @relation(fields: [sketch_id], references: [sketch_id], onDelete: NoAction, onUpdate: NoAction)
  tags      tags     @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([sketch_id, tag_id])
}

model sketch_writers {
  sketch_id Int
  person_id Int
  persons   persons  @relation(fields: [person_id], references: [person_id], onDelete: NoAction, onUpdate: NoAction)
  sketches  sketches @relation(fields: [sketch_id], references: [sketch_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([sketch_id, person_id])
}

model sketches {
  sketch_id               Int                       @id @default(autoincrement())
  title                   String                    @db.VarChar(100)
  slug                    String                    @unique @db.VarChar(100)
  thumbnail_url           String?
  youbube_embed           String?
  teaser                  String?
  description             String?
  quotes                  String[]
  notes                   String[]
  duration                Int?
  show_id                 Int
  episode_id              Int?
  recurring_sketch_id     Int?
  ratings                 ratings[]
  sketch_character_actors sketch_character_actors[]
  sketch_tags             sketch_tags[]
  sketch_writers          sketch_writers[]
  episodes                episodes?                 @relation(fields: [episode_id], references: [episode_id], onDelete: NoAction, onUpdate: NoAction)
  recurring_sketches      recurring_sketches?       @relation(fields: [recurring_sketch_id], references: [recurring_sketch_id], onDelete: NoAction, onUpdate: NoAction)
  shows                   shows                     @relation(fields: [show_id], references: [show_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([show_id, title])
}

model tag_categories {
  tag_category_id   Int    @id @default(autoincrement())
  tag_category_name String @unique @db.VarChar(100)
  slug              String @unique @db.VarChar(100)
  tags              tags[]
}

model tags {
  tag_id          Int            @id @default(autoincrement())
  tag_name        String         @db.VarChar(100)
  slug            String         @db.VarChar(100)
  tag_category_id Int
  sketch_tags     sketch_tags[]
  tag_categories  tag_categories @relation(fields: [tag_category_id], references: [tag_category_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([tag_category_id, slug])
  @@unique([tag_category_id, tag_name])
}

enum gender_type {
  Male
  Female
  Other
}

enum operation_type {
  INSERT
  UPDATE
  DELETE
}
